/* vim: set syntax=proto: */
/**
 * We can't include comments directly in a .tesla file because it's a
 * text-based serialisation format for protocol buffers. Instead, let's abuse
 * the C preprocessor a little bit:
 *
 * RUN: cpp -P -DTESLA %s %cpp_out %t.tesla
 * RUN: tesla print -format=text %t.tesla | %filecheck %s
 */

#ifdef TESLA
automaton {
  /*
   * CHECK: automaton 'example.c:314#42' {
   */
  identifier {
    location {
      filename: "example.c"
      line: 314
      counter: 42
    }
  }
  context: ThreadLocal
  expression {
    type: SEQUENCE
    sequence {
      /*
       * CHECK: state [[START:.*]] (X,X)
       * CHECK: example_syscall(X,X,X): Entry
       * CHECK: -->([[INIT:.*]])
       */
      expression {
        type: FUNCTION
        function {
          function {
            name: "example_syscall"
          }
          direction: Entry
          context: Callee
          argument {
            type: Any
            name: "cred"
          }
          argument {
            type: Any
            name: "index"
          }
          argument {
            type: Any
            name: "op"
          }
        }
      }
      /*
       * CHECK: state [[INIT]] (X,X)
       * CHECK: security_check(X,o,X)
       * CHECK: -->([[CHECK_O:.*]])
       */
      expression {
        type: FUNCTION
        function {
          function {
            name: "security_check"
          }
          direction: Exit
          context: Callee
          argument {
            type: Any
          }
          argument {
            type: Variable
            index: 0
            name: "o"
          }
          argument {
            type: Any
          }
          expectedReturnValue {
            type: Constant
            name: "since"
            value: 0
          }
        }
      }
      /*
       * After that transition, we know about one referenced variable:
       *
       * CHECK: state [[CHECK_O]] (o,X)
       * CHECK: security_check(X,o,op)
       * CHECK: -->([[CHECK_O_OP:.*]])
       */
      expression {
        type: FUNCTION
        function {
          function {
            name: "security_check"
          }
          direction: Exit
          context: Callee
          argument {
            type: Any
          }
          argument {
            type: Variable
            index: 0
            name: "o"
          }
          argument {
            type: Variable
            index: 1
            name: "op"
          }
          expectedReturnValue {
            type: Constant
            name: "since"
            value: 0
          }
        }
      }
      /*
       * CHECK: state [[CHECK_O_OP]] (o,op)
       * CHECK: <<assertion>>
       * CHECK: -->([[DONE:.*]])
       */
      expression {
        type: ASSERTION_SITE
        assertSite {
          location {
            filename: "example.c"
            line: 46
            counter: 0
          }
        }
      }
      /*
       * CHECK: state [[DONE]]
       */
    }
  }
  argument {
    type: Variable
    index: 0
    name: "o"
  }
  argument {
    type: Variable
    index: 1
    name: "op"
  }
  /*
   * CHECK: }
   */
}
root {
  identifier {
    location {
      filename: "example.c"
      line: 314
      counter: 42
    }
  }
}
root {
  identifier {
    location {
      filename: "example.c"
      line: 46
      counter: 0
    }
  }
}
#endif

