/* vim: set syntax=proto: */
/**
 * Test that tesla-cat can put multiple .tesla files together.
 *
 * Commands for llvm-lit (abusing the C preprocessor a bit):
 * RUN: cpp -P -DFILE_A %s %cpp_out %t.a.tesla
 * RUN: cpp -P -DFILE_B %s %cpp_out %t.b.tesla
 * RUN: tesla cat %t.a.tesla %t.b.tesla -o %t.tesla
 * RUN: %filecheck %s -input-file %t.tesla
 */


#ifdef FILE_A
automaton {
  identifier {
  /*
   * CHECK: name: "assertion_a"
   */
    name: "assertion_a"
  }
  context: Global
  expression {
    type: FIELD_ASSIGN
    fieldAssign {
      field {
        type: "tcpcb"
        index: 5
        base {
          type: Variable
          index: 0
          name: "tp"
        }
        name: "t_state"
      }
      operation: SimpleAssign
      value {
        type: Constant
        name: "TCPS_CLOSED"
        value: 0
      }
    }
  }
  argument {
    type: Variable
    index: 0
    name: "tp"
  }
}
root {
  identifier {
    name: "assertion_a"
  }
}
#endif


#ifdef FILE_B
automaton {
  identifier {
  /*
   * CHECK: name: "assertion_b"
   */
    name: "assertion_b"
  }
  context: Global
  expression {
    type: FIELD_ASSIGN
    fieldAssign {
      field {
        type: "tcpcb"
        index: 5
        base {
          type: Variable
          index: 0
          name: "tp"
        }
        name: "t_state"
      }
      operation: SimpleAssign
      value {
        type: Constant
        name: "TCPS_ESTABLISHED"
        value: 4
      }
    }
  }
  argument {
    type: Variable
    index: 0
    name: "tp"
  }
}
root {
  identifier {
    name: "assertion_b"
  }
}
#endif

/*
 * CHECK: root {
 * CHECK-NEXT: identifier {
 * CHECK-NEXT: name: "assertion_a"
 * CHECK-NEXT: }
 * CHECK-NEXT: }
 *
 * CHECK: root {
 * CHECK-NEXT: identifier {
 * CHECK-NEXT: name: "assertion_b"
 * CHECK-NEXT: }
 * CHECK-NEXT: }
 */

