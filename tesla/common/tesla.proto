/*! @file tesla.proto  TESLA intermediate representation (Protocol Buffers). */
/*
 * Copyright (c) 2012 Jonathan Anderson
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package tesla;


/**
 * A file that describes TESLA automata.
 */
message ManifestFile {
  /** All of the automata described by the manifest. */
  repeated AutomatonDescription automaton = 1;

  /**
   * The automata that are actually used in their own right
   * (as opposed to those that are only included by other automata).
   */
  repeated Usage root = 2;
}


/**
 * How an automaton is used for instrumentation.
 */
message Usage {
  /** The identifier of the automaton in question. */
  required Identifier identifier = 1;

  /** Where the automaton begins: a bound, a place for initialisation. */
  optional Expression beginning = 2;

  /** Where the automataon ends: a bound, a place for cleanup. */
  optional Expression end = 3;
}


/**
 * An inline assertion describing the temporal behaviour of software.
 */
message AutomatonDescription {
  required Identifier identifier = 1;

  /**
   * An automaton's context (e.g. thread-local) has implications for its
   * storage and synchronization.
   */
  enum Context { Global = 1; ThreadLocal = 2; };
  required Context context = 2;

  /** The temporal expression. */
  required Expression expression = 3;

  /** Program variables referenced by the automaton. */
  repeated Argument argument = 5;
}


/** Something that uniquely identifies an automaton. */
message Identifier {
  /** Programmer-assigned name. */
  optional string name = 1;

  /** If there is no assigned name, the location the automaton is defined. */
  optional Location location = 2;
}

/** An identifier for an automaton based on where it was defined. */
message Location {
  required string filename = 1;
  required int32 line = 2;
  required int32 counter = 3;
}

/**
 * A temporal expression.
 * e.g. previously(foo) || eventually(bar)
 *
 * This is a union type.
 */
message Expression {
  enum Type {
    BOOLEAN_EXPR = 1; SEQUENCE = 2; NULL_EXPR = 3;
    NOW = 4; FUNCTION = 5; FIELD_ASSIGN = 6;
    SUB_AUTOMATON = 7;
  };
  required Type type = 1;

  optional BooleanExpr booleanExpr = 2;
  optional Sequence sequence = 3;
  optional NowEvent now = 4;
  optional FunctionEvent function = 5;
  optional FieldAssignment fieldAssign = 6;
  optional Identifier subAutomaton = 7;
}

/** A boolean combination of expressions (with equal precedence). */
message BooleanExpr {
  enum Operation { BE_And = 1; BE_Or = 2; BE_Xor = 3; }

  required Operation operation = 1;
  repeated Expression expression = 2;
}

/** A sequence of temporal events. */
message Sequence {
  repeated Expression expression = 1;
}

/**
 * Execution has reached the point in the instrumented code where an
 * inline assertion was defined.
 */
message NowEvent {
  required Location location = 1;
}

/** A function has been called or has returned. */
message FunctionEvent {
  enum Direction { Entry = 1; Exit = 2; }
  enum CallContext { Caller = 1; Callee = 2; }
  /** Is this a C function call or an Objective-C message send? */
  enum CallKind { CCall = 1; ObjCInstanceMessage = 2; ObjCClassMessage = 3;
    ObjCSuperMessage = 4; }

  /** The function to be instrumented. This contains the selector name for
   * Objective-C*/
  required FunctionRef function = 1;

  /** We can instrument call, return or both. */
  optional Direction direction = 2;

  /** We can instrument at call sites, within called functions or both. */
  optional CallContext context = 3;

  /** Argument values that we care about. */
  repeated Argument argument = 4;

  /** If set, the return value that we expect / care about. */
  optional Argument expectedReturnValue = 5;

  /** If set, this event should only occur as described by the automaton. */
  optional bool strict = 6 [ default = true ];

  /** If set, specifies the kind of call-like operation that this describes. */
  optional CallKind kind = 7 [ default = CCall ];

  /** If set, this is the receiver for an Objective-C message.  This is either
   * a class name for class messages or a variable for instance message. */
  optional Argument receiver = 8;
}

/** A function that can be instrumented. */
message FunctionRef {
  /**
   * The function's name.
   *
   * TODO: we may need further disambiguation if two modules contain
   *       static functions with the same name. This may only matter when
   *       compiling via LLVM IR: I think this will fail when linking ELF
   *       object files.
   */
  required string name = 1;
}

/** Assignment to a field in a structure. */
message FieldAssignment {
  /** Types of assignment: simple or compound. */
  enum AssignType { SimpleAssign = 1; PlusEqual = 2; MinusEqual = 3; };

  /** The field being assigned to. */
  required StructField field = 8;

  /** The kind of assignment (e.g. '+='). */
  required AssignType operation = 4;

  /** The value being assigned. */
  required Argument value = 5;

  /** If set, this event should only occur as described by the automaton. */
  optional bool strict = 7 [ default = true ];
}

/** A field within a structure. */
message StructField {
  /** Name of the structure type. */
  required string type = 1;

  /** Reference to the structure. */
  required Argument base = 2;

  /** Name of the struct field. */
  required string name = 3;

  /** Index of the field within the struct. */
  required int32 index = 4;
}

/** An argument to a function. */
message Argument {
  enum Type { Constant = 1; Variable = 2; Any = 3; Indirect = 4; Field = 5; }
  required Type type = 1;

  /**
   * Ways that we can match a constant: exactly, as flags (OR) or a mask (AND).
   */
  enum MatchType { Exact = 1; Flags = 2; Mask = 3; }

  /**
   * An index for the variable within an automaton.
   *
   * For instance, if an assertion refers to foo(x,y) and bar(y,z), the
   * arguments to foo are [0,1] within the automata and the arguments to bar
   * are [1,2].
   *
   * Only applicable when type == { Variable | Indirect | Field }.
   */
  optional int32 index = 2;

  /** The name of the referenced variable (if applicable, for debugging). */
  optional string name = 3;

  /** The integer value. */
  optional int64 value = 5;

  /** Values that are ORed together in the mask. */
  optional MatchType constantMatch = 6 [ default = Exact ];

  /** In an indirect expression like '&x' or '*x', this is 'x'. */
  optional Argument indirection = 7;

  /** If type == Field, this is the field holding the value. */
  optional StructField field = 8;
}

