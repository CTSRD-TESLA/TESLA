/*! @file tesla.proto  TESLA intermediate representation (Protocol Buffers). */
/*
 * Copyright (c) 2012 Jonathan Anderson
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
package tesla;


/**
 * A TESLA assertion describing the temporal behaviour of software.
 */
message Assertion {
  /** Where the automaton is defined (an identifier). */
  required Location location = 1;

  /**
   * An automaton's context (e.g. thread-local) has implications for its
   * storage and synchronization.
   */
  enum Context { Global = 1; ThreadLocal = 2; };
  required Context context = 2;

  /** The temporal expression. */
  required Expression expression = 3;

  /** Argument values that will be passed to 'now' event instrumentation. */
  repeated Argument argument = 5;
}

/** An identifier for an automaton based on where it was defined. */
message Location {
  required string filename = 1;
  required int32 line = 2;
  required int32 counter = 3;
}

/**
 * A temporal expression.
 * e.g. previously(foo) || eventually(bar)
 *
 * This is a union type.
 */
message Expression {
  enum Type { BOOLEAN_EXPR = 1; SEQUENCE = 2; };
  required Type type = 1;

  optional BooleanExpr booleanExpr = 2;
  optional Sequence sequence = 3;
}

/** A boolean combination of expressions (with equal precedence). */
message BooleanExpr {
  enum Operation { BE_And = 1; BE_Or = 2; BE_Xor = 3; }

  required Operation operation = 1;
  repeated Expression expression = 2;
}

/** A sequence of temporal events. */
message Sequence {
  repeated Event event = 1;
}


/**
 * A temporal event.
 *
 * An event can be instrumented. An event can occur any number of times
 * in a real execution.
 *
 * This is a union type.
 */
message Event {
  enum Type { REPETITION = 1; NOW = 2; FUNCTION = 3; IGNORE = 4; }
  required Type type = 1;

  optional Repetition repetition = 2;
  optional NowEvent now = 3;
  optional FunctionEvent function = 4;
}

/** A series of events, repeated some number of times. */
message Repetition {
  /** The events to repeat. The order of these events matters. */
  repeated Event event = 1;

  /** If set, the repetition must occur at least 'min' times. */
  optional int32 min = 2;

  /** If set, the repetition may occur no more than 'max' times. */
  optional int32 max = 3;
}

/**
 * Execution has reached the point in the instrumented code where an
 * inline assertion was defined.
 */
message NowEvent {
  required Location location = 1;
}

/** A function has been called or has returned. */
message FunctionEvent {
  enum Direction { Entry = 1; Exit = 2; EntryAndExit = 3; }
  enum CallContext { Caller = 1; Callee = 2; CallerAndCallee = 3; }

  /** The function to be instrumented. */
  required FunctionRef function = 1;

  /** We can instrument call, return or both. */
  optional Direction direction = 2 [default = EntryAndExit];

  /** We can instrument at call sites, within called functions or both. */
  optional CallContext context = 3 [default = CallerAndCallee];

  /** Argument values that we care about. */
  repeated Argument argument = 4;

  /** If set, the return value that we expect / care about. */
  optional Argument expectedReturnValue = 5;
}

/** A function that can be instrumented. */
message FunctionRef {
  /**
   * The function's name.
   *
   * TODO: we may need further disambiguation if two modules contain
   *       static functions with the same name. This may only matter when
   *       compiling via LLVM IR: I think this will fail when linking ELF
   *       object files.
   */
  required string name = 1;
}

/** An argument to a function. */
message Argument {
  enum Type { Constant = 1; Variable = 2; Any = 3; }
  required Type type = 1;

  /**
   * An index within an automaton.
   *
   * For instance, if an assertion refers to foo(x,y) and bar(y,z), the
   * arguments to foo are [0,1] within the automata and the arguments to bar
   * are [1,2].
   */
  optional int32 index = 2;

  /** The name of the referenced variable (if applicable, for debugging). */
  optional string name = 3;

  /** A type-specific representation of the expected value (for debugging). */
  optional string value = 4;
}

