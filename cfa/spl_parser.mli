type token =
  | EOL of (Spl_location.t)
  | EOF of (Spl_location.t)
  | IDENTIFIER of (string * Spl_location.t)
  | STATECALL of (string * Spl_location.t)
  | INT of (int * Spl_location.t)
  | FUNCTION of (Spl_location.t)
  | AUTOMATON of (Spl_location.t)
  | BOOL_DECL of (Spl_location.t)
  | INT_DECL of (Spl_location.t)
  | BOOLEAN of (Spl_location.t)
  | EXPORT of (Spl_location.t)
  | LBRACE of (Spl_location.t)
  | RBRACE of (Spl_location.t)
  | LBRACKET of (Spl_location.t)
  | RBRACKET of (Spl_location.t)
  | MULTIPLE of (Spl_location.t)
  | ALWAYS_ALLOW of (Spl_location.t)
  | DOTDOT of (Spl_location.t)
  | OPTIONAL of (Spl_location.t)
  | COMMA of (Spl_location.t)
  | SEMICOLON of (Spl_location.t)
  | ASSIGN of (Spl_location.t)
  | TRUE of (Spl_location.t)
  | FALSE of (Spl_location.t)
  | AND of (Spl_location.t)
  | OR of (Spl_location.t)
  | NOT of (Spl_location.t)
  | EITHER of (Spl_location.t)
  | IF of (Spl_location.t)
  | DURING of (Spl_location.t)
  | HANDLE of (Spl_location.t)
  | WHILE of (Spl_location.t)
  | DO of (Spl_location.t)
  | UNTIL of (Spl_location.t)
  | PLUS of (Spl_location.t)
  | MINUS of (Spl_location.t)
  | MULTIPLY of (Spl_location.t)
  | DIVIDE of (Spl_location.t)
  | GREATER of (Spl_location.t)
  | GREATER_EQUAL of (Spl_location.t)
  | LESS of (Spl_location.t)
  | LESS_EQUAL of (Spl_location.t)
  | EQUALS of (Spl_location.t)
  | EXIT of (Spl_location.t)
  | ABORT of (Spl_location.t)

val main :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Spl_syntaxtree.funcs
