#!/usr/bin/env python

import argparse
import collections
import os
import re
import sys

args = argparse.ArgumentParser()

args.add_argument('filename', nargs='+', help = 'DTrace profiling output')
args.add_argument('-s', '--symbol-filter', default = '.*',
	help = 'Only report on symbols that match this regex')

args = args.parse_args()


#
# Pattern for a line that contains useful information:
#
data_line = re.compile('(%(filename)s)`(%(symbol)s)\+(%(hex)s) (%(dec)s)' % {
	'filename': '[_\.a-zA-Z0-9]+',
	'symbol':   '[_a-zA-Z][_a-zA-Z0-9]+',
	'hex':      '0x[0-9a-f]+',
	'dec':      '[0-9]+',
})

symbol_filter = re.compile(args.symbol_filter)


class Binary(object):
	def __init__(self): self.functions = collections.defaultdict(Function)
	def __repr__(self): return 'Binary { %s }' % self.functions

class Function(object):
	def __init__(self): self.offset_counts = []
	def __repr__(self): return str(self.offset_counts)
	def total(self, total):
		count = sum([ o.count for o in self.offset_counts ])
		return (count, 100.0 * count / total)

class Offset(object):
	def __init__(self, offset, count):
		self.offset = int(offset, 16)
		self.count = int(count)

	def __str__(self): return '+0x%04x %8d' % (self.offset, self.count)
	def __repr__(self): return '+0x%x:%d' % (self.offset, self.count)


binaries = collections.defaultdict(Binary)
total = 0

for filename in args.filename:
	for line in open(filename, 'r'):
		match = data_line.match(line)
		if not match: continue

		(name, symbol, offset, count) = match.groups()

		if not symbol_filter.match(symbol): continue

		fn = binaries[name].functions[symbol]
		fn.offset_counts.append(Offset(offset, count))
		total += int(count)


for (name,binary) in binaries.items():
	print '%s:' % name

	for symbol in sorted(binary.functions.keys()):
		fn = binary.functions[symbol]

		prefix = ' ' * 36
		print '%40s' % symbol, '%12d %8.2f%%' % fn.total(total)

		for o in fn.offset_counts:
			print prefix, o, '%8.2f%%' % (100.0 * o.count / total)

		print
