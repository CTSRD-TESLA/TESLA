#!/bin/sh

: ${arch:="`uname -p`"}
: ${buildlogs:="_TESLA.build"}
: ${jflag:="-j32"}
: ${tarball:=""}

echo "Building TESLA kernels for ${arch} with ${jflag}"


#
# Do some sanity checks on our $PATH. For instance, if we don't have
# an LLVM 'opt' binary, the build the build will fail in mysterious ways.
#
assert_in_path() {
	name=$1
	if [ "`which $name`" == "" ]; then
		echo "'$name' not found; maybe adjust \$PATH?"
		echo "$PATH"
		exit 1
	fi
}

assert_in_path 'clang'
assert_in_path 'opt'
assert_in_path 'tesla'
assert_in_path 'fbsdmake'


#
# Create the log output directory and symlink to the actual output.
#
echo "Putting build logs in ${buildlogs}"
mkdir -p ${buildlogs} || exit 1
rm -f ${buildlogs}/obj || exit 1
ln -s `make -V .OBJDIR`/sys ${buildlogs}/obj || exit 1

echo

#
# We only need to build the toolchain once, as this script isn't intended
# to support cross-building (yet).
#
echo "Building toolchain..."
fbsdmake ${jflag} kernel-toolchain 2>&1 > ${buildlogs}/toolchain.out || exit 1

#
# Build the TESLA_* kernels plus GENERIC (with and without debug features).
#
configurations="GENERIC GENERIC_NODEBUG `ls sys/${arch}/conf | grep TESLA`"
for conf in ${configurations}; do
	echo "Building ${conf}..."
	outfile=${buildlogs}/${conf}.buildkernel.out

	fbsdmake ${jflag} KERNCONF=${conf} -D NO_MODULES buildkernel \
		2>&1 > ${outfile} \
		|| (tail -n20 ${outfile} && exit 1)
done

#
# If $tarball is set, create a tarball of all the kernels.
# Use bzip compression to make life easier on Linux cluster heads.
#
if [ "$tarball" == "yes" ]; then
	cd ${buildlogs} || exit 1
	outdir=`pwd`

	cd ${buildlogs}/obj || exit 1
	tarball=${outdir}/tesla-kernels.tar.bz2
	echo "Building ${tarball}..."
	tar -cjf ${tarball} \
		GENERIC*/kernel GENERIC*/tesla.manifest \
		TESLA_*/kernel TESLA_*/tesla.manifest \
		|| exit 1
fi

echo "done."
